-----------6 CNN-Pnuemonia---------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.layers import Flatten,Dense,Conv2D,MaxPooling2D
from PIL import Image
from sklearn.model_selection import train_test_split

train_dir = "OneDrive/Desktop/DL COdes/6 Pneumonia_X_Ray/train"
test_dir ="OneDrive/Desktop/DL COdes/6 Pneumonia_X_Ray/test"

train_datagen = ImageDataGenerator(
    rescale=1/255,
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    width_shift_range=0.2,
    height_shift_range=0.2
)

test_datagen = ImageDataGenerator(rescale=1./255)

train_gen = train_datagen.flow_from_directory(train_dir,target_size=(150,150),batch_size=128,class_mode='binary')

test_gen = test_datagen.flow_from_directory(test_dir,target_size=(150,150),batch_size=128,class_mode='binary')

model = Sequential()
model.add(Conv2D(32,(3,3),activation='relu',input_shape=(150,150,3)))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(32,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(32,(3,3),activation='relu'))
model.add(MaxPooling2D(2,2))

model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train_gen,epochs = 5 , steps_per_epoch=train_gen.samples , validation_data=test_gen,validation_steps=test_gen.samples)

plt.plot(history.history['accuracy'],label='Training Accuracy')
plt.plot(history.history['val_accuracy'],label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

predictions = model.predict(test_gen)

import matplotlib.pyplot as plt
import numpy as np

# Function to display predictions on 10 test samples
def display_10_sample_predictions(model, test_generator, class_names):
    # Reset the generator to start from the beginning
    test_generator.reset()
    
    # Get a batch of images and labels
    x_test, y_true = next(test_gen)
    y_pred = model.predict(x_test[:10])  # Predict on the first 10 samples
    y_pred_labels = (y_pred > 0.5).astype(int).reshape(-1)  # Convert to binary labels if needed

    # Plot the 10 samples with predictions
    plt.figure(figsize=(15, 5))
    for i in range(10):
        plt.subplot(2, 5, i + 1)
        plt.imshow(x_test[i])
        true_label = class_names[int(y_true[i])]
        pred_label = class_names[y_pred_labels[i]]
        plt.title(f"Pred: {pred_label}\nTrue: {true_label}")
        plt.axis('off')
    plt.show()

# Example usage
class_names = ['Normal', 'Pneumonia']  # Adjust based on your class labels
display_10_sample_predictions(model, test_gen, class_names)



