----------------4 CIFAR 10--------------------------

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import cifar10
import random

# Specify dataset path
dataset_path = "C:/Users/vaidi/anaconda3/Deep Learning Practice/cifar10_dataset"  # Change this to your CIFAR-10 dataset path

# Load the CIFAR-10 dataset
x, y = load_cifar10_dataset(dataset_path)

# Load CIFAR-10 images from directories
def load_cifar10_dataset(dataset_path, img_size=(32, 32)):
    images = []
    labels = []
    for label in range(10):  # Assuming folders are named 0, 1, ..., 9
        folder_path = os.path.join(dataset_path, str(label))
        for img_filename in os.listdir(folder_path):
            img_path = os.path.join(folder_path, img_filename)
            img = load_img(img_path, target_size=img_size)  # Resize to 32x32
            img_array = img_to_array(img) / 255.0  # Normalize
            images.append(img_array)
            labels.append(label)
    return np.array(images), np.array(labels)

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

# Load CIFAR-10 dataset directly
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Normalize the data
x_train, x_test = x_train.astype('float32') / 255.0, x_test.astype('float32') / 255.0

# Convert labels to one-hot encoded format
y_train, y_test = to_categorical(y_train, 10), to_categorical(y_test, 10)

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse']
airplanes, cars, birds, cats, deer, dogs, frogs, horses, ships, and trucks.

model = Sequential([
 Flatten(input_shape=(32,32,3)), 
 Dense(128, activation='relu'),
 Dense(64, activation='relu'),
 Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(x_train, y_train, epochs=15, batch_size=64, validation_data=(x_test, y_test))

# Evaluate the model
test_loss, test_acc = model.evaluate(x_test, y_test)
print(f"Test accuracy: {test_acc:.4f}")

plt.figure(figsize=(12, 4))
#plot loss
plt.subplot(1,2,1)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Test'],loc='upper right')


#plot accuracy
plt.subplot(1,2,2)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Test'],loc='upper right')
plt.show()

#plot one training image
plt.figure(figsize=(4,4))
plt.imshow(x_train[0])
plt.title(f'Train Image: {class_names[np.argmax(y_train[0])]}')
plt.axis('off')
plt.show()



#plot one testing img
n = random.randint(0, len(x_test) - 1)
plt.figure(figsize=(4, 4))
plt.imshow(x_test[n])
plt.title(f'Test Image: {class_names[np.argmax(y_test[n])]}')
plt.axis('off')
plt.show()
